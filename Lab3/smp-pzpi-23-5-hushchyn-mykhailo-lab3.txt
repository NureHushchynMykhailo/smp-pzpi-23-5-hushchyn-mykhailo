МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з лабораторної роботи № 3 з дисципліни
скриптові мови програмування





Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Гущин М. В.						          Сокорчук Ігор Петрович










Харків 2025

ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень        131.05.20250.1Початкова версія              
      

ЗАВДАННЯ

     Результатом лабораторної роботи має бути робочий сайт з інтернет магазином. Він має складатися з таких розділів: 1. Сторінка товарів. 2. Сторінка «Кошик». Кожна сторінка має складатися з таких частин: 1. «Шапка» сторінки, 2. Тіло сторінки. 3. «Підвал» або Footer сторінки. На сторінці товарів необхідно відобразити список доступних для покупки найменувань з можливістю вибрати кількість одиниць товарів і кнопкою «купити». Під час натискання на кнопку «купити», має відправлятися запит (відправка форми, методом POST) на сервер, де дані зберігаються в сесію. На сторінці «Кошик» необхідно відобразити список обраних користувачем товарів (які були збережені у сесію). Якщо ви ще не обрали жодного товару, то має бути відображений напис «Перейти до покупок» (посилання).
      

ХІД РОБОТИ
     У першому рядку файлу db.php відкривається PHP-тег <?php, що означає початок виконання PHP-коду. Далі використовується конструкція try-catch, яка дозволяє обробляти можливі помилки при спробі підключення до бази даних.
     Всередині блоку try створюється об’єкт $db класу PDO (PHP Data Objects)  універсального інтерфейсу для роботи з базами даних у PHP. Конструктору цього класу передається рядок підключення до SQLite-бази даних, яка розташована у тому самому каталозі, що й скрипт. Це вказується за допомогою __DIR__ . '/shop.db', де __DIR__ — вбудована константа PHP, яка повертає шлях до поточного каталогу файлу.
     Після успішного створення об’єкта $db, методом setAttribute() задається режим обробки помилок:
     PDO::ATTR_ERRMODE встановлюється у значення PDO::ERRMODE_EXCEPTION, що означає у разі виникнення помилки буде згенеровано виняток (exception). Це дозволяє зручно обробляти помилки через блок catch. У разі виникнення помилки при підключенні до бази даних, керування передається до блоку catch, де відловлюється виняток класу PDOException. Виводиться повідомлення про помилку за допомогою die() з текстом "DB Error: " та самою помилкою, яку повертає метод getMessage()
      1. <?php
      2. try 
      3. {
      4. 
      5. $db = new PDO('sqlite:' . __DIR__ . '/shop.db');
      6. $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
      7.   
      8. } catch (PDOException $e) 
      9. {
      10.     die("DB Error: " . $e->getMessage());
      11. }
      12. ?>
     
     На початку PHP-скрипта main.php викликається функція session_start(), яка ініціалізує сесію, дозволяючи зберігати дані користувача між різними зверненнями до сайту, наприклад, для збереження вмісту кошика. Далі за допомогою конструкції require_once підключається файл db.php, що містить код для встановлення з’єднання з базою даних SQLite. Далі розпочинається стандартна HTML-розмітка сторінки. У блоці <head> вказується кодування документа UTF-8, задається заголовок сторінки у вкладці браузера та підключається зовнішній CSS-файл для стилізації сторінки.
     У тілі документа в <header> розміщується навігаційне меню у вигляді трьох гіперпосилань: Home, Products та Cart. Кожне посилання передає у рядок запиту параметр page, який визначає, яку сторінку сайту потрібно відобразити. Далі в блоці <main> оголошується змінна $page, якій присвоюється значення параметра page із глобального масиву $_GET. 
     Якщо параметр не переданий, за замовчуванням використовується значення home. За допомогою оператора switch перевіряється значення змінної $page і, залежно від нього, підключається відповідний PHP-файл. Якщо значення дорівнює cart, підключається файл cart.php, якщо products — products.php. Якщо ж параметр дорівнює home, без підключення зовнішнього файлу виводиться привітальний заголовок і короткий опис із порадою перейти у вкладку Products для перегляду асортименту товарів. Якщо жоден із варіантів не підходить, за замовчуванням нічого не виводиться.
     В завершенні, у блоці <footer> розміщується копірайт із зазначенням року та назви веб-магазину. (див. дод В)
     На початку скрипта перевіряється стан сесії за допомогою функції session_status(). Якщо сесія ще не запущена (тобто її статус дорівнює PHP_SESSION_NONE), виконується session_start(), що дозволяє зберігати дані про користувача між різними сторінками сайту. Далі підключається файл db.php, який містить налаштування підключення до бази даних SQLite.
     
      1. <?php
      2. if (session_status() === PHP_SESSION_NONE) 
      3. {
      4.     session_start();
      5. }
      6. require_once 'db.php';
     
     Після цього йде перевірка, чи надійшов на сервер POST-запит, і чи присутній у масиві $_POST ключ add_to_cart, що означає, що користувач натиснув кнопку купівлі. Якщо так, у циклі foreach перебираються всі пари ключ-значення з масиву $_POST. Для кожного ключа перевіряється, чи починається він зі слова count_, чи є значення числовим і чи більше воно за нуль. Якщо умова виконується, з імені поля видаляється префікс count_, і отримане значення приводиться до цілого типу, оскільки воно є ідентифікатором товару. Кількість товару, яку користувач вказав для купівлі, також приводиться до цілого типу. Далі за допомогою підготовленого SQL-запиту INSERT INTO дані про товар і його кількість додаються до таблиці cart у базі даних. Після завершення додавання всіх обраних товарів виконується перенаправлення користувача на сторінку кошика за допомогою header("Location: main.php?page=cart"), після чого робота скрипта припиняється командою exit.
      7. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_to_cart'])) 
      8. {
      9.      foreach ($_POST as $key => $value)
      10.       {
      11.        if (strpos($key, 'count_') === 0 && is_numeric($value) && $value > 0) 
      12.         {
      13.             $product_id = (int) str_replace('count_', '', $key);
      14.             $count = (int)$value;
      15.             $stmt = $db->prepare("INSERT INTO cart (product_id, count) VALUES (?, ?)");
      16.             $stmt->execute([$product_id, $count]);
      17.         }
      18.     }
      19.     header("Location: main.php?page=cart");
      20.     exit;
      21. }
     Наступним рядком виконується вибірка всіх товарів з таблиці products у базі даних за допомогою SQL-запиту SELECT * FROM products. Отримані дані зчитуються у вигляді асоціативного масиву через метод fetchAll з параметром PDO::FETCH_ASSOC.
     
      22. $products = $db->query("SELECT * FROM products")->fetchAll(PDO::FETCH_ASSOC);
      23. ?>
     
     Далі йде HTML-розмітка із заголовком Available Products та початком форми, яка відправляється методом POST. Для кожного товару з вибірки формується блок із назвою товару, його ціною та полем для введення кількості. Ім'я поля формується динамічно як count_ плюс ідентифікатор товару, що дозволяє пізніше за назвою поля визначити, про який товар іде мова. За замовчуванням у полі встановлене значення 0, а мінімальне допустиме значення — також 0. Наприкінці форми розміщується кнопка з написом Buy, яка має ім'я add_to_cart. Коли користувач натискає цю кнопку, дані з форми відправляються на сервер, після чого обробляються згідно з описаною вище логікою.
     
      24. <h2>Available Products</h2>
      25. <form method="POST" class="product-list">
      26.     <?php foreach ($products as $product): ?>
      27.         <div>
      28.             <label><?= htmlspecialchars($product['name']) ?> — $<?= $product['price'] ?></label>
      29.             <input type="number" name="count_<?= $product['id'] ?>" value="0" min="0">
      30.         </div>
      31.     <?php endforeach; ?>
      32.     <button type="submit" name="add_to_cart" class="btn">Buy</button>
      33. </form>
      34.
     На початку скрипта cart.php перевіряється, чи активна сесія за допомогою функції session_status(). Якщо ні, то виконується session_start(), що дозволяє використовувати сесійні змінні та зберігати дані між сторінками. Далі підключається файл db.php, у якому відбувається підключення до бази даних SQLite.
      1. <?php
      2. if (session_status() === PHP_SESSION_NONE) 
      3. {
      4.     session_start();
      5. }
      6. require_once 'db.php';
     Після цього перевіряється, чи був виконаний HTTP-запит методом POST, і чи у переданих даних присутній ключ remove. Це означає, що користувач натиснув кнопку для видалення товару з кошика. Якщо така дія зафіксована, формується підготовлений SQL-запит для видалення запису з таблиці cart за конкретним id. Із запобіжною метою значення передається через приведення до типу (int), щоб уникнути SQL-інʼєкцій. Після успішного виконання запиту здійснюється перенаправлення на сторінку кошика за допомогою функції header() і виконується команда exit для завершення обробки поточного скрипта.
     
      7. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove'])) 
      8. {
      9.     $stmt = $db->prepare("DELETE FROM cart WHERE id = ?");
      10.     $stmt->execute([(int)$_POST['remove']]);
      11.     header("Location: ?page=cart");
      12.     exit;
      13. }
      
     Далі за допомогою SQL-запиту здійснюється вибірка всіх товарів, які знаходяться у кошику. Виконується об’єднання таблиць cart та products за полем product_id. Вибираються такі дані: унікальний id товару у кошику (як cart_id), id продукту, його назва, ціна та кількість. Результат запиту зберігається у змінній $cartItems у вигляді асоціативного масиву.
     
      14. $cartItems = $db->query("
      15.     SELECT cart.id as cart_id, products.id, products.name, products.price, cart.count
      16.     FROM cart
      17.     JOIN products ON products.id = cart.product_id
      18. ")->fetchAll(PDO::FETCH_ASSOC);
      19. ?>
      20.
      
     У HTML-розмітці виводиться заголовок Shopping Cart. Далі перевіряється, чи масив товарів у кошику не порожній. Якщо є товари, формується HTML-таблиця. У першому рядку таблиці задаються заголовки стовпців: ідентифікатор товару, назва, ціна, кількість, сума за позицію та порожній стовпець для кнопки видалення.
     
      21. <h2>Shopping Cart</h2>
      22. <?php if ($cartItems): ?>
      23.     <table>
      24.         <tr>
      25.             <th>ID</th><th>Name</th><th>Price</th><th>Count</th><th>Sum</th><th></th>
      26.         </tr>
      
     У циклі foreach перебираються всі товари з кошика. Для кожного товару обчислюється сумарна вартість шляхом множення ціни на кількість, після чого ця сума додається до загальної суми $total. Дані про товар виводяться у таблицю: ідентифікатор, назва (із захистом від XSS за допомогою htmlspecialchars()), ціна, кількість та сумарна вартість для позиції.
     У останній колонці кожного рядка знаходиться форма для видалення товару. Форма має метод POST, містить приховане поле remove зі значенням cart_id поточного товару та кнопку для підтвердження видалення. Це дозволяє безпечно передати ідентифікатор товару у кошику для обробки видалення. 
      
27.         <?php $total = 0; foreach ($cartItems as $item): 
28.             $sum = $item['price'] * $item['count'];
29.             $total += $sum;
30.         ?>
31.         <tr>
32.             <td><?= $item['id'] ?></td>
33.             <td><?= htmlspecialchars($item['name']) ?></td>
34.             <td>$<?= $item['price'] ?></td>
35.             <td><?= $item['count'] ?></td>
36.             <td>$<?= $sum ?></td>
37.             <td>
38.                 <form method="POST" style="display:inline;">
39.    <input type="hidden" name="remove" value="<?= $item['cart_id'] ?>">
40.                  <button type="submit" class="btn-danger">Remove</button>
41.                 </form>
42.             </td>
43.         </tr>
44.         <?php endforeach; ?>

     Після завершення циклу виводиться фінальний рядок таблиці з підрахованою загальною сумою всіх товарів у кошику.
     
45.         <tr>
46.             <td colspan="4"><strong>Total</strong></td>
47.             <td colspan="2"><strong>$<?= $total ?></strong></td>
48.         </tr>
49.     </table>

      Якщо кошик порожній, користувачу виводиться повідомлення про те, що кошик порожній, із посиланням для переходу до сторінки перегляду товарів.
      
50. <?php else: ?>
51.     <p class="center">Cart is empty. <a href="main.php?page=products">Continue Shopping</a></p>
52. <?php endif; ?>

      ВИСНОВКИ
      У ході виконання лабораторної роботи було розроблено веб-додаток мовою PHP для моделювання роботи онлайн-магазину. Програма реалізовує головне меню з можливістю переходу між сторінками, вибору товарів, додавання їх до кошика, перегляду вмісту кошика, видалення окремих позицій і розрахунку загальної вартості покупки. Під час виконання завдання було закріплено навички роботи з сесіями PHP, підключенням до бази даних SQLite через PDO, виконання SQL-запитів на вибірку, вставку та видалення даних.
      Також було застосовано базові принципи організації структури веб-сторінок за допомогою PHP та HTML, розробки динамічних форм і обробки користувацького вводу через метод POST.
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      



     ДОДАТОК А
     Посилання на YouTube
      
      Відеозапис презентації результатів лабораторної роботи: https://youtu.be/jQ8oLbHxvTM
    00:00 Привітання
    00:15 Підключення бази даних
    01:15 Запуск сесії
    01:34 Підключення файлу для роботи з базою даних
    01:43 Навігація по проекту
    03:04 Перевірка сесії
    03:32 Метод POST для додавання товару до кошику
    04:55 Вибірка всіх товарів
    05:10 Форма для відображення товарів
    06:20 Перевірка сесії
    06:33 Підключення файлу для роботи з базою даних
    06:43 Метод POST для видалення товару з кошику
    06:35 Запит до бази даних вмісту кошику
    08:10 Відображення кошику користувача
    08:56 Логіка розрахунку суми
    10:17 Демонстрація роботи проекту
    10:44 Демонстрація роботи з базою даних
    
        

    ДОДАТОК Б
    
    GitHub репозиторій: https://github.com/NureHushchynMykhailo/smp-pzpi-23-5-hushchyn-mykhailo/tree/main/Lab3/smp-pzpi-23-5-hushchyn-mykhailo-lab3
      
      
      
      
      

     ДОДАТОК В
     
     
      1. <?php
      2. session_start();
      3. require_once 'db.php';
      4. ?>
      5. <!DOCTYPE html>
      6. <html>
      7. <head>
      8.     <meta charset="UTF-8">
      9.     <title>Web-магазин</title>
      10.     <link rel="stylesheet" href="style.css">
      11. </head>
      12. <body>
      13. <header>
      14.     <nav>
      15.         <a href="?page=home">Home</a>
      16.         <a href="?page=products">Products</a>
      17.         <a href="?page=cart">Cart</a>
      18.     </nav>
      19. </header>
      20. <main>
      21. <?php
      22. $page = $_GET['page'] ?? 'home';
      23. switch ($page) 
      24. {
      25.     case "cart":
      26.         require_once("cart.php");
      27.         break;
      28.     case "products":
      29.         require_once("products.php");
      30.         break;
      31.     case "home":
      32.         echo "<h2>Welcome to Web-shop</h2>
      33.               <p>Go to the <strong>Products</strong> tab to view the range of items.</p>";
      34.         break;
      35.     default:
      36.         break;
      37. }
      38. ?>
      39. </main>
      40. <footer>
      41.     <p>&copy; 2025 Web-магазин. All rights reserved.</p>
      42. </footer>
      43. </body>
      44. </html>
      

2


