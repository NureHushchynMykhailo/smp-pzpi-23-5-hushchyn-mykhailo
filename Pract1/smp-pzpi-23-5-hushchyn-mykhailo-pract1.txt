МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ





Звіт
з практичної роботи № 1
з дисципліни
«Скриптові мови програмування»









Виконав:	Перевірив
ст. гр. ПЗПІ-23-5	ст. викладач кафедри ПІ
Гущин М. В.	Сокорчук Ігор Петрович














2025
ЗАВДАННЯ

     Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
     Ялинка повинна бути симетричною. Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
     Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу. Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
     Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску. Параметри скрипта повинні мати додатне значення. Вказані значення повинні округлятися до потрібних у меншу сторону.
     Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.
ХІД РОБОТИ
     Спочатку створюється новий файл скрипта pzpi-23-5-hushchyn-mykhailo-task1, і в нього записується шебанг #!/bin/bash, щоб вказати, що скрипт слід виконувати за допомогою Bash-інтерпретатора. Далі оголошується глобальна змінна last_symbol зі значенням #, яка буде зберігати символ, яким малюється поточний рядок трикутника.
      1. #!/bin/bash
      2. last_symbol='#'
     Після цього створюється функція draw_triangle, яка приймає чотири параметри: висоту трикутника, початкову ширину рядка, максимальну ширину для центрування та символ для малювання. У функції за допомогою циклу for від 0 до height обчислюється ширина кожного рядка, кількість пробілів зліва для вирівнювання по центру, а також виводиться рядок з відповідною кількістю символів. Після кожного рядка символ змінюється з # на * або навпаки для створення чергування. Після побудови всієї фігури функція оновлює значення глобальної змінної last_symbol, щоб передати його для наступного виклику.
      3. draw_triangle() {
      4.     local height=$1
      5.     local start_width=$2
      6.     local max_width=$3
      7.     local current_symbol=$4
      8.     for ((i = 0; i < height; i++)); do
      9.         local line_width=$((start_width + i * 2))
      10.         local spaces=$(((max_width - line_width) / 2))
      11.         printf "%*s" "$spaces" ""
      12.         printf "%${line_width}s\n" "" | tr " " "$current_symbol"
      13.               if [[ "$current_symbol" == "#" ]]; then
      14.             current_symbol="*"
      15.         else
      16.             current_symbol="#"
      17.         fi
      18.     done
      19. 
      20.     last_symbol="$current_symbol"
      21. }
      
     Після оголошення функції йде перевірка аргументів командного рядка. Якщо не передано два параметри, виводиться повідомлення про помилку. 
      22. if [[ $# -ne 2 ]]; then
      23.     echo "Помилка: потрібно вказати два параметри — висоту ялинки та ширину снігу." >&2
      24.     exit 1
      25. fi
      
     Перевіряється, чи обидва параметри є додатними цілими числами та чи не менші вони за 7. 
      26. total_height=$1
      27. snow_width=$2
      28. if ! [[ $total_height =~ ^[0-9]+$ && $snow_width =~ ^[0-9]+$ ]] || ((total_height <= 0 || snow_width <= 0)); then
      29.     echo "Помилка: параметри повинні бути додатніми цілими числами." >&2
      30.     exit 1
      31. fi
      32. 
      33. if ((snow_width % 2 == 0)); then
      34.     snow_width=$((snow_width - 1))
      35. fi
      
     Якщо snow_width (ширина снігу) парна, вона зменшується на 1, щоб зробити її непарною для симетрії.
      36. if ((snow_width < 7 || total_height < 7)); then
      37.     echo "Помилка: ширина снігу та висота ялинки мають бути не менше 7" >&2
      38.     exit 1
      39. fi
      
      Потім обчислюється ширина гілок (branches_width) як ширина снігу мінус 2, і перевіряється, чи ця ширина дозволяє побудувати симетричний ярус.
      40. branches_width=$((snow_width - 2))
      41. if ((branches_width < 3)); then
      42.     echo "Помилка: ширина снігу надто мала або не дозволяє створити симетричні гілки." >&2
      43.     exit 1
      44. fi
      
     Створюється допоміжна функція max_layer_width, яка повертає максимальну ширину одного трикутника на основі заданої висоти. 
      45. max_layer_width() {
      46.     local height=$1
      47.     echo $((2 * (height / 2) - 1))
      48. }
      
     Обчислюється, чи співпадає максимальна ширина ярусу з шириною снігу, інакше виводиться помилка. 
      49. max_width=$(max_layer_width "$total_height")
      50. if ((snow_width != max_width)); then
      51.     echo "Помилка: максимальна ширина ярусу не співпадає з шириною снігу" >&2
      52.     exit 1
      53. fi
      
     Потім визначається висота одного трикутника (triangle_height) та скільки ярусів можна побудувати, враховуючи загальну висоту дерева. 
      54. triangle_height=$(( (branches_width - 1) / 2 ))
      55. static_lines=4
      56. available_lines=$((total_height - static_lines))
      57. layer_height=$((2 * triangle_height))
      58. num_layers=$((available_lines / layer_height))
      
     Якщо неможливо побудувати хоча б один повний ярус, виводиться помилка.
      59. if ((num_layers < 1)); then
      60.     echo "Помилка: недостатньо висоти для побудови хоча б одного ярусу." >&2
      61.     exit 1
      62. fi
      
     Далі формується верхівка ялинки з одного символу *, який центрується по ширині. 
      63. spaces=$(((snow_width - 1) / 2))
      64. printf "%*s*\n" "$spaces" ""
      
     Потім у циклі until малюється кожен ярус ялинки, що складається з двох трикутників. 
      65. layer=0
      66. current_symbol="#"
      67. until ((layer >= num_layers)); do
      68.     draw_triangle "$triangle_height" 3 "$snow_width" "$current_symbol"
      69.     current_symbol="$last_symbol"
      70.     draw_triangle "$triangle_height" 3 "$snow_width" "$current_symbol"
      71.     current_symbol="$last_symbol"
      72.     ((layer++))
      73. done
      
     Символи чергуються між # і *, причому після кожного виклику draw_triangle оновлюється символ на основі змінної last_symbol. Після завершення циклу додається стовбур ялинки з двох рядків ###, центрованих по ширині. 
      74. for _ in {1..2}; do
      75.     spaces=$(((snow_width - 3) / 2))
      76.     printf "%*s###\n" "$spaces" ""
      77. done
     
     В самому кінці малюється снігова основа, яка представляє собою рядок з snow_width зірочок *.
      78. count=0
      79. while ((count < snow_width)); do
      80.     printf "*"
      81.     ((count++))
      82. done
      83. printf "\n"
      
     У результаті скрипт будує симетричну ASCII-ялинку з чергуванням символів, коректно обробляє помилки вводу та перевіряє параметри для забезпечення візуальної гармонії дерева.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ВИСНОВКИ
     В результаті виконання роботи було розроблено Bash-скрипт, який успішно генерує симетричну ASCII-ялинку з двома ярусами гілок, стовбуром та сніговою основою. Скрипт коректно обробляє параметри командного рядка, перевіряє їх на додатність, цілість та мінімальні значення, а також враховує необхідність непарної ширини снігу для забезпечення симетрії.
     У разі некоректних вхідних даних скрипт виводить відповідні повідомлення про помилки і припиняє виконання, що робить його надійним у використанні. Загальна логіка дозволяє гнучко задавати висоту ялинки та ширину шару снігу, зберігаючи при цьому необхідні пропорції і симетрію.
     Поставлене завдання виконане повністю, скрипт відповідає всім технічним вимогам і може бути використаний для візуалізації ялинки у консольному режимі.
        

     ДОДАТОК А
     Посилання на YouTube

     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/3svXKE-Fe84
     
    00:00 Привітання
    00:08 Оголошення завдання
    00:21 Оголошення змінної для чергування символів
    00:40 Функція draw_triangle()
    02:29 Перевірка подання значень
    02:45 Призначення змінних висоти ялинки і ширини снігу
    02:55 Перевірка подання цілих додатніх чисел
    03:08 Валідація снігу
    03:30 Валідація параметрів ялинки
    04:11 Функція max_layer_width()
    04:39 Перевірка розмірів ялинки
    05:34 Вивід верхівки ялинки
    05:49 Друк трикутників
    06:16 Друк стовбура
    06:38 Друк снігу
    07:00 Друк ялинки
    
    
    
    
    
    
    
        

    ДОДАТОК В
    
    GitHub репозиторій: https://github.com/NureHushchynMykhailo/smp-pzpi-23-5-hushchyn-mykhailo/blob/main/Pract1/smp-pzpi-23-5-hushchyn-mykhailo-pract1/smp-pzpi-23-5-hushchyn-mykhailo-pract1-code


