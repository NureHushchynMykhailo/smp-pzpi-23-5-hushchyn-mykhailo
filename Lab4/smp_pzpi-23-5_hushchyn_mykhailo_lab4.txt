МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з лабораторної роботи № 4 з дисципліни
скриптові мови програмування





Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Гущин М. В.						          Сокорчук Ігор Петрович










Харків 2025

ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень        101.06.20250.1Початкова версія              
      

ЗАВДАННЯ
     Використовуючи матеріал попередніх лабораторних робіт, потрібно додати такий функціонал: 1. Прибрати дублювання шапки і підвалу сайту (якщо воно є). 2. Додати сторінку логіна. Обмежити доступ до сайту не залогіненим користувачам. 3. Додати сторінку профілю з можливістю завантажити фото.

ХІД РОБОТИ
     У першому рядку файлу db.php відкривається PHP-тег <?php, що означає початок виконання PHP-коду. Далі використовується конструкція try-catch, яка дозволяє обробляти можливі помилки при спробі підключення до бази даних.
     Всередині блоку try створюється об’єкт $db класу PDO (PHP Data Objects)  універсального інтерфейсу для роботи з базами даних у PHP. Конструктору цього класу передається рядок підключення до SQLite-бази даних, яка розташована у тому самому каталозі, що й скрипт. Це вказується за допомогою __DIR__ . '/shop.db', де __DIR__ — вбудована константа PHP, яка повертає шлях до поточного каталогу файлу.
     Після успішного створення об’єкта $db, методом setAttribute() задається режим обробки помилок:
     PDO::ATTR_ERRMODE встановлюється у значення PDO::ERRMODE_EXCEPTION, що означає у разі виникнення помилки буде згенеровано виняток (exception). Це дозволяє зручно обробляти помилки через блок catch. У разі виникнення помилки при підключенні до бази даних, керування передається до блоку catch, де відловлюється виняток класу PDOException. Виводиться повідомлення про помилку за допомогою die() з текстом "DB Error: " та самою помилкою, яку повертає метод getMessage()
      1. <?php
      2. try 
      3. {
      4. 
      5. $db = new PDO('sqlite:' . __DIR__ . '/shop.db');
      6. $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
      7.   
      8. } catch (PDOException $e) 
      9. {
      10.     die("DB Error: " . $e->getMessage());
      11. }
      12. ?>
     
     На початку скрипта main.php відбувається ініціалізація сесії за допомогою функції session_start(), що дозволяє зберігати дані користувача між сторінками для авторизації чи роботи з кошиком. Далі підключається файл db.php, у якому міститься підключення до бази даних через обʼєкт PDO.
     Далі в HTML-розмітці задається структура сторінки, встановлюється кодування UTF-8, заголовок «Web-магазин» та підключається таблиця стилів із файлу style.css. У тілі сторінки виводиться загальний заголовок сайту з файлу header.php, який містить панель навігації.
     Основний вміст сторінки розміщується в блоці <main>. Спочатку за допомогою змінної $page перевіряється, яку саме сторінку запросив користувач. Якщо параметр page передано в URL (через $_GET), його значення записується в змінну $page. Якщо ні — за замовчуванням підставляється значення 'home'.
     Далі виконується перевірка: якщо користувач не авторизований (тобто в сесії немає ключа user) і водночас він намагається перейти на сторінку, відмінну від login, йому буде показано сторінку помилки 404 через підключення page404.php. Таким чином, доступ до інших сторінок без авторизації заблоковано.
     Якщо ж користувач авторизований або відкриває сторінку входу, відбувається перевірка змінної $page за допомогою конструкції switch. У залежності від того, яке значення передано в параметрі page, підключається відповідний PHP-файл:
     * cart — відображає сторінку кошика (cart.php).
     * profile — сторінку профілю користувача (profile.php).
     * products — сторінку з переліком товарів (products.php).
     * login — сторінку авторизації (login.php).
     * logout — сценарій виходу з облікового запису (logout.php).
     * home — сторінку з привітанням і короткою інструкцією.
     Якщо значення параметра $page не збігається ні з одним із перелічених варіантів, користувачу показується сторінка 404, що підключається через page404.php.
     Наприкінці сторінки виводиться футер сайту, який підключається з окремого файлу footer.php, що дозволяє зручно розміщувати службову інформацію чи контакти. (див. дод В)
     На початку скрипта products.php перевіряється стан сесії за допомогою функції session_status(). Якщо сесія ще не запущена (тобто її статус дорівнює PHP_SESSION_NONE), виконується session_start(), що дозволяє зберігати дані про користувача між різними сторінками сайту. Далі підключається файл db.php, який містить налаштування підключення до бази даних SQLite.
     
      1. <?php
      2. if (session_status() === PHP_SESSION_NONE) 
      3. {
      4.     session_start();
      5. }
      6. require_once 'db.php';
     
     Після цього йде перевірка, чи надійшов на сервер POST-запит, і чи присутній у масиві $_POST ключ add_to_cart, що означає, що користувач натиснув кнопку купівлі. Якщо так, у циклі foreach перебираються всі пари ключ-значення з масиву $_POST. Для кожного ключа перевіряється, чи починається він зі слова count_, чи є значення числовим і чи більше воно за нуль. Якщо умова виконується, з імені поля видаляється префікс count_, і отримане значення приводиться до цілого типу, оскільки воно є ідентифікатором товару. Кількість товару, яку користувач вказав для купівлі, також приводиться до цілого типу. Далі за допомогою підготовленого SQL-запиту INSERT INTO дані про товар і його кількість додаються до таблиці cart у базі даних. Після завершення додавання всіх обраних товарів виконується перенаправлення користувача на сторінку кошика за допомогою header("Location: main.php?page=cart"), після чого робота скрипта припиняється командою exit.
      7. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_to_cart'])) 
      8. {
      9.      foreach ($_POST as $key => $value)
      10.       {
      11.        if (strpos($key, 'count_') === 0 && is_numeric($value) && $value > 0) 
      12.         {
      13.             $product_id = (int) str_replace('count_', '', $key);
      14.             $count = (int)$value;
      15.             $stmt = $db->prepare("INSERT INTO cart (product_id, count) VALUES (?, ?)");
      16.             $stmt->execute([$product_id, $count]);
      17.         }
      18.     }
      19.     header("Location: main.php?page=cart");
      20.     exit;
      21. }
     Наступним рядком виконується вибірка всіх товарів з таблиці products у базі даних за допомогою SQL-запиту SELECT * FROM products. Отримані дані зчитуються у вигляді асоціативного масиву через метод fetchAll з параметром PDO::FETCH_ASSOC.
     
      22. $products = $db->query("SELECT * FROM products")->fetchAll(PDO::FETCH_ASSOC);
      23. ?>
     
     Далі йде HTML-розмітка із заголовком Available Products та початком форми, яка відправляється методом POST. Для кожного товару з вибірки формується блок із назвою товару, його ціною та полем для введення кількості. Ім'я поля формується динамічно як count_ плюс ідентифікатор товару, що дозволяє пізніше за назвою поля визначити, про який товар іде мова. За замовчуванням у полі встановлене значення 0, а мінімальне допустиме значення — також 0. Наприкінці форми розміщується кнопка з написом Buy, яка має ім'я add_to_cart. Коли користувач натискає цю кнопку, дані з форми відправляються на сервер, після чого обробляються згідно з описаною вище логікою.
     
      24. <h2>Available Products</h2>
      25. <form method="POST" class="product-list">
      26.     <?php foreach ($products as $product): ?>
      27.         <div>
      28.             <label><?= htmlspecialchars($product['name']) ?> — $<?= $product['price'] ?></label>
      29.             <input type="number" name="count_<?= $product['id'] ?>" value="0" min="0">
      30.         </div>
      31.     <?php endforeach; ?>
      32.     <button type="submit" name="add_to_cart" class="btn">Buy</button>
      33. </form>
      34.
     
     На початку скрипта cart.php перевіряється, чи активна сесія за допомогою функції session_status(). Якщо ні, то виконується session_start(), що дозволяє використовувати сесійні змінні та зберігати дані між сторінками. Далі підключається файл db.php, у якому відбувається підключення до бази даних SQLite.
     
      1. <?php
      2. if (session_status() === PHP_SESSION_NONE) 
      3. {
      4.     session_start();
      5. }
      6. require_once 'db.php';
      
     Після цього перевіряється, чи був виконаний HTTP-запит методом POST, і чи у переданих даних присутній ключ remove. Це означає, що користувач натиснув кнопку для видалення товару з кошика. Якщо така дія зафіксована, формується підготовлений SQL-запит для видалення запису з таблиці cart за конкретним id. Із запобіжною метою значення передається через приведення до типу (int), щоб уникнути SQL-інʼєкцій. Після успішного виконання запиту здійснюється перенаправлення на сторінку кошика за допомогою функції header() і виконується команда exit для завершення обробки поточного скрипта.
     
      7. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove'])) 
      8. {
      9.     $stmt = $db->prepare("DELETE FROM cart WHERE id = ?");
      10.     $stmt->execute([(int)$_POST['remove']]);
      11.     header("Location: ?page=cart");
      12.     exit;
      13. }
      
     Далі за допомогою SQL-запиту здійснюється вибірка всіх товарів, які знаходяться у кошику. Виконується об’єднання таблиць cart та products за полем product_id. Вибираються такі дані: унікальний id товару у кошику (як cart_id), id продукту, його назва, ціна та кількість. Результат запиту зберігається у змінній $cartItems у вигляді асоціативного масиву.
     
      14. $cartItems = $db->query("
      15.     SELECT cart.id as cart_id, products.id, products.name, products.price, cart.count
      16.     FROM cart
      17.     JOIN products ON products.id = cart.product_id
      18. ")->fetchAll(PDO::FETCH_ASSOC);
      19. ?>
      20.
      
     У HTML-розмітці виводиться заголовок Shopping Cart. Далі перевіряється, чи масив товарів у кошику не порожній. Якщо є товари, формується HTML-таблиця. У першому рядку таблиці задаються заголовки стовпців: ідентифікатор товару, назва, ціна, кількість, сума за позицію та порожній стовпець для кнопки видалення.
     
      21. <h2>Shopping Cart</h2>
      22. <?php if ($cartItems): ?>
      23.     <table>
      24.         <tr>
      25.             <th>ID</th><th>Name</th><th>Price</th><th>Count</th><th>Sum</th><th></th>
      26.         </tr>
      
     У циклі foreach перебираються всі товари з кошика. Для кожного товару обчислюється сумарна вартість шляхом множення ціни на кількість, після чого ця сума додається до загальної суми $total. Дані про товар виводяться у таблицю: ідентифікатор, назва (із захистом від XSS за допомогою htmlspecialchars()), ціна, кількість та сумарна вартість для позиції.
     У останній колонці кожного рядка знаходиться форма для видалення товару. Форма має метод POST, містить приховане поле remove зі значенням cart_id поточного товару та кнопку для підтвердження видалення. Це дозволяє безпечно передати ідентифікатор товару у кошику для обробки видалення. 
      
27.         <?php $total = 0; foreach ($cartItems as $item): 
28.             $sum = $item['price'] * $item['count'];
29.             $total += $sum;
30.         ?>
31.         <tr>
32.             <td><?= $item['id'] ?></td>
33.             <td><?= htmlspecialchars($item['name']) ?></td>
34.             <td>$<?= $item['price'] ?></td>
35.             <td><?= $item['count'] ?></td>
36.             <td>$<?= $sum ?></td>
37.             <td>
38.                 <form method="POST" style="display:inline;">
39.    <input type="hidden" name="remove" value="<?= $item['cart_id'] ?>">
40.                  <button type="submit" class="btn-danger">Remove</button>
41.                 </form>
42.             </td>
43.         </tr>
44.         <?php endforeach; ?>

     Після завершення циклу виводиться фінальний рядок таблиці з підрахованою загальною сумою всіх товарів у кошику.
     
45.         <tr>
46.             <td colspan="4"><strong>Total</strong></td>
47.             <td colspan="2"><strong>$<?= $total ?></strong></td>
48.         </tr>
49.     </table>

      Якщо кошик порожній, користувачу виводиться повідомлення про те, що кошик порожній, із посиланням для переходу до сторінки перегляду товарів.
      
50. <?php else: ?>
51.     <p class="center">Cart is empty. <a href="main.php?page=products">Continue Shopping</a></p>
52. <?php endif; ?>

У файлі header.php в блоці <head> задаються базові налаштування HTML-сторінки. Встановлюється кодування UTF-8 для коректного відображення тексту різними мовами, зокрема українською. Далі задається заголовок сторінки, який відображатиметься на вкладці браузера як Web-магазин. Також підключається зовнішня таблиця стилів style.css, яка відповідає за оформлення та вигляд елементів сторінки.
Після цього починається розмітка верхньої частини сайту, яка оформлена всередині тега <header>. У середині header розташований елемент <nav>, що є панеллю навігації — це набір посилань для переходу між різними сторінками сайту.
Усередині навігаційного меню міститься кілька посилань:  home - головна сторінка сайту, products - сторінка з товарами, cart - сторінка кошика. Далі за допомогою конструкції if (isset($_SESSION['user'])) перевіряється, чи існує в сесії запис про авторизованого користувача. Якщо користувач авторизований, у меню зʼявляються додаткові посилання: Profile — сторінка профілю користувача та Logout — вихід із системи.
Якщо ж користувач не авторизований (тобто в сесії немає ключа user), замість посилань Profile і Logout виводиться лише одне — Login, яке веде на сторінку авторизації.

1. <head>
2.     <meta charset="UTF-8">
3.     <title>Web-магазин</title>
4.     <link rel="stylesheet" href="style.css">
5. </head>
6. <header>
7.     <nav>
8.         <a href="?page=home">Home</a>
9.         <a href="?page=products">Products</a>
10.         <a href="?page=cart">Cart</a>
11.         <?php if (isset($_SESSION['user'])): ?>
12.             <a href="?page=profile">Profile</a>
13.             <a href="?page=logout">Logout</a>
14.         <?php else: ?>
15.             <a href="?page=login">Login</a>
16.         <?php endif; ?>
17.     </nav>
18. </header>

     У файлі footer.php розташовано HTML-блок <footer>, який містить службову інформацію про сайт. Усередині footer знаходиться тег <p>, що відображає текст із символом авторського права &copy; та роком 2025, після чого вказана назва сайту — Web-магазин, а також фраза All rights reserved.

1. <footer>
2.     <p>&copy; 2025 Web-магазин. All rights reserved.</p>
3. </footer>


     На початку скрипта login .php перевіряється, чи активна сесія за допомогою функції session_status(), і якщо ні — виконується session_start(), що дозволяє зберігати дані між сторінками. 
      
      1. <?php
      2. if (session_status() === PHP_SESSION_NONE) 
      3. {
      4.     session_start();
      5. }
     
     Далі перевіряється, чи запит на сторінку був виконаний методом POST, тобто чи була надіслана форма авторизації. Якщо так, то перевіряється наявність полів username і password у масиві $_POST. Якщо обидва поля присутні, то підключається файл credential.php, у якому зберігаються дані для авторизації у вигляді асоціативного масиву з ключами userName і password. Після цього відбувається перевірка: якщо введені користувачем логін і пароль збігаються з даними з credential.php, то в сесію записується ім’я користувача в змінну $_SESSION['user'] та дата входу в $_SESSION['login_time']. Після цього виконується перенаправлення користувача на головну сторінку main.php за допомогою header() і припиняється подальше виконання скрипта через exit. Якщо дані для входу невірні, в змінну $error записується повідомлення про помилку. Якщо користувач не заповнив одне з обов’язкових полів, у $error вноситься інше повідомлення — про необхідність заповнити всі поля.
      
6. if ($_SERVER['REQUEST_METHOD'] === 'POST') 
7. {
8.     if (isset($_POST['username'], $_POST['password'])) 
9.     {
10.         $credentials = require 'credential.php';
11. 
12.         if ($_POST['username'] === $credentials['userName'] && $_POST['password'] === $credentials['password']) {
13.             $_SESSION['user'] = $_POST['username'];
14.             $_SESSION['login_time'] = date("Y-m-d H:i:s");
15.            header("Location: main.php?");
16.             exit;
17.         } 
18.         else 
19.         {
20.             $error = 'Неправильний логін або пароль';
21.         }
22.     } 
23.     else 
24.     {
25.         $error = 'Заповніть усі поля';
26.     }
27. }
28. ?>
     
     Далі виводиться HTML-форма авторизації з методом POST. У формі є заголовок, два текстових поля для логіна і пароля, обидва з атрибутом required для перевірки на клієнтському боці, і кнопка для надсилання форми. Якщо в змінній $error є текст, він виводиться над полями форми у вигляді абзацу з класом error. 
     
29. <!DOCTYPE html>
30. <html>
31. <head>
32.     <meta charset="UTF-8">
33.     <title>Login</title>
34. </head>
35. <body>
36.     <form method="POST">
37.         <h2>Login</h2>
38.       <?php if (!empty($error)) echo "<p class='error'>$error</p>"; ?>
39.         <input type="text" name="username" placeholder="Login" required>
40. <input type="password" name="password" placeholder="Password" required>
41.         <button type="submit">Log In</button>
42.        
43.     </form>
44. </body>
45. </html>

     PHP-скрипт logout.php відповідає за вихід користувача з системи. Спочатку він перевіряє, чи активна сесія за допомогою функції session_status(). Якщо сесія ще не активна, виконується session_start(), щоб мати доступ до сесійних змінних. Далі викликається функція session_destroy(), яка видаляє всі дані сесії на сервері — таким чином, користувач виходить із системи, і його авторизаційна інформація зникає. Після цього за допомогою функції header() користувача перенаправляють на сторінку авторизації — main.php?page=login. Викликається exit.

1. <?php
2. if (session_status() === PHP_SESSION_NONE) 
3. {
4.     session_start();
5. }
6. session_destroy();
7.  header("Location: main.php?page=login");
8. exit;
9.

     Файл page404.php відповідає за відображення повідомлення про відмову в доступі для неавторизованих користувачів. На сторінці виводиться заголовок <h2> із текстом Access Denied, що повідомляє користувача про заборону перегляду вмісту. Далі розміщений параграф <p> із поясненням, що для перегляду вмісту сайту необхідно увійти до системи. Після цього додається посилання у вигляді кнопки, яке веде на сторінку авторизації — main.php?page=login. 

1. <h2>Access Denied</h2>
2. <p>You need to log in to view the content of this website.</p>
3. <a href="main.php?page=login" class="btn">Go to Login</a>
        

     На початку PHP-скрипта profile.php перевіряється, чи активна сесія за допомогою session_status(). Якщо сесія не активна, виконується session_start(), щоб мати змогу використовувати сесійні змінні. Далі визначається шлях до файлу profile_data.php, у якому зберігаються дані профілю користувача. Якщо такий файл існує, його підключають і дані з нього записуються у змінну $user. Якщо ж файл відсутній, створюється порожній масив із полями для імені, прізвища, дати народження, опису та фото.
     
      1. <?php
      2. if (session_status() === PHP_SESSION_NONE) 
      3. {
      4.     session_start();
      5. }
      6. $dataFile = 'profile_data.php';
      7. if (file_exists($dataFile)) 
      8. {
      9.     $user = include $dataFile;
      10. } 
      11. else 
      12. {
      13.     $user = [
      14.         'first_name' => '',
      15.         'last_name' => '',
      16.         'birth_date' => '',
      17.         'about' => '',
      18.         'photo' => ''
      19.     ];
      20. }
     
     Після цього перевіряється, чи надійшов POST-запит і чи була натиснута кнопка з ім’ям save_profile. Якщо так, то змінні $firstName, $lastName, $birthDate та $about отримують значення з полів форми після обрізання зайвих пробілів. Далі створюється масив $errors для зберігання повідомлень про помилки. Спершу перевіряється, чи всі поля заповнені. Якщо хоча б одне порожнє, додається повідомлення "All fields must be filled.". Потім перевіряється, чи довжина імені та прізвища не менша за 2 символи, інакше додається помилка "First Name and Last Name must be at least 2 characters.". Для перевірки віку дата народження перетворюється у формат мітки часу, обчислюється різниця між поточним часом і цією датою, переводиться в роки, і якщо користувачеві менше 16 років — додається помилка "You must be at least 16 years old.". Далі перевіряється довжина поля "About" і якщо менше ніж 50 символів — додається повідомлення "The 'About' section must be at least 50 characters.". Якщо масив помилок порожній, тобто всі умови виконано, перевіряється наявність завантаженого файлу фотографії без помилок. Якщо файл є, визначається його розширення, формується унікальне ім’я файлу, створюється папка uploads, якщо її ще немає, і файл переміщується в цю папку. Новий шлях до фотографії записується у масив $user['photo']. Після цього дані профілю зберігаються у файл і користувача перенаправляє на сторінку профілю. (див. Дод Г)
     Після оновлення всіх полів даних, інформація про користувача записується у файл profile_data.php у вигляді PHP-коду, який повертає масив. 
     
      39.     $user['first_name'] = $firstName;
      40.     $user['last_name'] = $lastName;
      41.     $user['birth_date'] = $birthDate;
      42.     $user['about'] = $about;
      43. 
      44.file_put_contents($dataFile, "<?php\nreturn " . var_export($user, true) . ";\n");
      45. 
      46.     header("Location: main.php?page=profile");
      47.     exit;
      48. }
      49. ?>
     
     У HTML-частині спочатку перевіряється, чи є помилки у масиві $errors. Якщо помилки є, створюється блок <div> із класом error-messages, усередині якого формується список <ul>, де кожна помилка виводиться як елемент списку <li>. Далі йде сама форма з методом POST і атрибутом enctype="multipart/form-data" для підтримки завантаження файлів. Кожне текстове поле — ім’я, прізвище, дата народження та інформація про себе — має відповідну мітку та поле введення. Значення полів автоматично заповнюються даними з масиву $user із застосуванням htmlspecialchars() для безпечного виведення. Поле для завантаження фотографії супроводжується умовою: якщо фото вже є, воно виводиться у вигляді зображення з обмеженням максимальної ширини 200 пікселів і стилями відступів, інакше виводиться повідомлення “No photo uploaded”. Наприкінці форми розміщена кнопка відправки з класом btn та ім’ям save_profile. (див. дод. Д)
        


      ВИСНОВКИ
      У ході виконання лабораторної роботи було покращено веб-додаток мовою PHP для моделювання роботи онлайн-магазину. Реалізовано головне меню з можливістю переходу між сторінками, вибору товарів, додавання їх до кошика, перегляду вмісту кошика, видалення окремих позицій та розрахунку загальної вартості покупки. Під час роботи над проектом було закріплено практичні навички роботи з сесіями PHP, організацією підключення до бази даних SQLite за допомогою PDO, виконання SQL-запитів для вибірки, додавання та видалення даних. У проекті застосовано основні принципи структурування веб-сторінок за допомогою PHP та HTML, розробки динамічних форм і обробки даних, отриманих через метод POST. Важливим етапом роботи стало впровадження системи авторизації користувача з обмеженням доступу до окремих сторінок для незареєстрованих відвідувачів, а також перевірка коректності введених даних. Додатково набуті вміння щодо масштабування коду, організації повторно використовуваних модулів, керування правами доступу та інтеграції функціональних можливостей у єдину цілісну систему.
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      



     ДОДАТОК А
     Посилання на YouTube
      
      Відеозапис презентації результатів лабораторної роботи: https://youtu.be/KfH0vIyJ1FQ
    00:00 Привітання
    00:29 Підключення до бази даних
    00:34 main.php
    00:50 Панель навігації
    01:04 Доступ користувача до сайту
    01:40 Вибір сторінки для відкриття
    02:05 footer.php
    02:16 products.php
    02:45 cart.php
    03:05 header.php
    03:57 footer.php
    04:05 login.php
    04:15 Запит методом POST на авторизацію користувача
    04:26 credential.php
    04:40 Перевірка введених користувачем даних
    05:15 HTML форма для логіну
    05:35 logout.php
    05:53 page404.php
    06:05 profile.php
    06:19 Профіль користувача
    06:49 Запит методом POST на збереження персональних даних
    07:05 Валідація полів
    07:55 Збереження фото
    08:20 Вивід помилок подання даних
    08:39 Відображення персональних даних
    09:39 Тестування програми
        

    ДОДАТОК Б
    
    GitHub репозиторій: https://github.com/NureHushchynMykhailo/smp-pzpi-23-5-hushchyn-mykhailo/tree/main/Lab4/smp-pzpi-23-5-hushchyn-mykhailo-lab4-code
      
      
      
      
      

     ДОДАТОК В
     
     
1. <?php
2. 
3. session_start();
4. require_once 'db.php';
5. 
6. ?>
7. <!DOCTYPE html>
8. <html>
9. <head>
10.     <meta charset="UTF-8">
11.     <title>Web-магазин</title>
12.     <link rel="stylesheet" href="style.css">
13. </head>
14. <body>
15. <?php require_once("header.php"); ?>
16. <main>
17. <?php
18. $page = $_GET['page'] ?? 'home';
19. if (!isset($_SESSION['user']) && $page !== 'login') 
20. {
21.     require_once("page404.php");
22. }
23. else 
24. {
25. switch ($page) 
26. {
27.     case "cart":
28.         require_once("cart.php");
29.         break;
30.     case "profile":
31.         require_once("profile.php");
32.         break;
33.     case "products":
34.         require_once("products.php");
35.         break;
36.      case "login":
37.         require_once("login.php");
38.         break;
39.     case "logout":
40.         require_once("logout.php");
41.         break;
42.     case "home":
43.         echo "<h2>Welcome to Web-shop</h2>
44.  <p>Go to the <strong>Products</strong> tab to view the range of items.</p>";
45.         break;
46.     default:
47.         require_once("page404.php");
48.         break;
49. }
50. }
51. ?>
52. </main>
53. 
54. <?php require_once("footer.php"); ?>
55. 
56. </body>
57. </html>
58.

        

ДОДАТОК Г
      

21. if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['save_profile'])) 
22. {
23.     $firstName = trim($_POST['first_name']);
24.     $lastName = trim($_POST['last_name']);
25.     $birthDate = $_POST['birth_date'];
26.     $about = trim($_POST['about']);
27.     $errors = [];
28.     if (empty($firstName) || empty($lastName) || empty($birthDate) || empty($about)) 
29.     {
30.         $errors[] = 'All fields must be filled.';
31.     }
32.     if (strlen($firstName) < 2 || strlen($lastName) < 2) 
33.     {
34.         $errors[] = 'First Name and Last Name must be at least 2 characters.';
35.     }
36.     $birthTimestamp = strtotime($birthDate);
37.     $age = (int)floor((time() - $birthTimestamp) / (365.25 * 24 * 60 * 60));
38.     if ($age < 16) 
39.     {
40.         $errors[] = 'You must be at least 16 years old.';
41.     }
42.     if (strlen($about) < 50) 
43.     {
44.         $errors[] = 'The "About" section must be at least 50 characters.';
45.     }
46.     if (empty($errors)) 
47.     {
48.         if (isset($_FILES['photo']) && $_FILES['photo']['error'] === 0) 
49.         {
50.             $ext = pathinfo($_FILES['photo']['name'], PATHINFO_EXTENSION);
51.             $filename = 'uploads/' . uniqid() . "." . $ext;
52.             if (!is_dir('uploads')) {
53.                 mkdir('uploads', 0777, true);
54.             }
55.             move_uploaded_file($_FILES['photo']['tmp_name'], $filename);
56.             $user['photo'] = $filename;
57.         }
        

ДОДАТОК Д
      
        68. <h2>Edit Profile</h2>
        69. <?php if (!empty($errors)): ?>
        70.     <div class="error-messages">
        71.         <ul>
        72.             <?php foreach ($errors as $err): ?>
        73.                 <li><?= htmlspecialchars($err) ?></li>
        74.             <?php endforeach; ?>
        75.         </ul>
        76.     </div>
        77. <?php endif; ?>
        78. <form method="POST" enctype="multipart/form-data">
        79.     <label>First Name:</label>
        80.     <input type="text" name="first_name" value="<?= htmlspecialchars($user['first_name']) ?>" required>
        81.     <label>Last Name:</label>
        82.     <input type="text" name="last_name" value="<?= htmlspecialchars($user['last_name']) ?>" required>
        83.     <label>Date of Birth:</label>
        84.     <input type="date" name="birth_date" value="<?= htmlspecialchars($user['birth_date']) ?>" required>
        85.     <label>About:</label>
        86.     <textarea name="about" rows="4" required><?= htmlspecialchars($user['about']) ?></textarea>
        87.     <label>Photo:</label>
        88.     <?php if (!empty($user['photo'])): ?>
        89.         <img src="<?= htmlspecialchars($user['photo']) ?>" alt="Profile Photo" style="max-width:200px; display:block; margin:10px 0;">
        90.     <?php else: ?>
        91.         <p>No photo uploaded</p>
        92.     <?php endif; ?>
        93.     <input type="file" name="photo">
        94.     <button class="btn" type="submit" name="save_profile">Save</button>
        95. </form>

        


2


