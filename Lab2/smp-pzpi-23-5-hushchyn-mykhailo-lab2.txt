МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з лабораторної роботи № 2 з дисципліни
скриптові мови програмування





Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Гущин М. В.						          Сокорчук Ігор Петрович










Харків 2025

ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень        131.05.20250.1Початкова версія              
      

ЗАВДАННЯ

     Створіть консольний застосунок на PHP «Продовольчий магазин "ВЕСНА"» у файлі ~/імʼя_облікового_запису-task3.php. Після запуску програма має виводити головне меню з пунктами: 1 – Вибрати товари, 2 – Отримати підсумковий рахунок, 3 – Налаштувати свій профіль, 0 – Вийти з програми. 
     Далі програма очікує введення значення з клавіатури. Якщо користувач вводить число, якого немає в списку можливих команд, необхідно вивести повідомлення про помилку і запропонувати користувачу ввести інше число.
     Щоб розпочати купувати товари, необхідно ввести число «1», після чого користувач повинен потрапити в режим закупівлі товарів.
На екрані має з’явитися перелік продуктів, де кожен рядок складається з номера, назви товару і його вартості.
     Щоб купити товар, необхідно ввести його номер. Після успішної перевірки на існування номера товару в списку, програма має попросити ввести кількість товару.
     Якщо номер товару і його кількість (менше 100 шт.) були вказані коректно, то товар додається в кошик. Якщо вказано кількість «0», то товар видаляється з кошика.
     Далі знову відображається перелік товарів і пропонується купити наступний товар. Якщо номер товару вказано неправильно, виводиться сповіщення про помилку, нову виводиться перелік товарів.
     Щоб завершити купувати товари і перейти до попереднього меню, необхідно ввести з клавіатури цифру «0».
Щоб отримати підсумковий рахунок, потрібно ввести число «2».
Рахунок має містити таку інформацію: №, назва, ціна товару, кількість товару, вартість товару.  У кінці чека має бути: РАЗОМ ДО CПЛАТИ: сума_за_всі_товари. Щоб встановити свій профіль потрібно, ввести число «3», після чого програма попросить ввести ваше ім'я та ваш вік. 
     Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
Користувач не може бути молодшим 7-ми або старшим 150-ти років
Щоб завершити роботу та вийти з програми, потрібно ввести число «0».
У програмі потрібно перевіряти інформацію, яку вводить користувач, а саме:
• обраний пункт меню існує;
• обраний товар існує;
• введена кількість товару більша нуля;
• імʼя користувача містить хча б одну літеру;
• вік користувача становить від 7-ми до 150-ти років.
     Робота та функціональність створеної програми повинна збігатися із тестовою програмою:
     pzpi23-php-task3-example
     
      

ХІД РОБОТИ
     У першому рядку файлу вказано шебанг #!/bin/php, що дозволяє запускати скрипт безпосередньо в Unix-подібних операційних системах як виконуваний файл, використовуючи PHP-інтерпретатор. Далі відкривається PHP-тег, після чого створюється асоціативний масив $products. У цьому масиві кожному числовому ключу відповідає вкладений масив із двома полями: name — назва товару, та price — його вартість у гривнях. Перелік містить десять позицій продуктів харчування, серед яких йогурт, паляниця, масло, ковбаса, сік, чай, шоколад, макарони, цукор та курячі яйця. Цей масив буде використано далі у програмі для формування списку товарів, доступних для вибору користувачем, а також для обчислення підсумкового рахунку в процесі покупки.
     
      1. <?php
      2. 
      3. $products = [
      4.     1 => ['name' => 'Йогурт полуничний', 'price' => 15],
      5.     2 => ['name' => 'Паляниця', 'price' => 12],
      6.     3 => ['name' => 'Масло вершкове', 'price' => 42],
      7.     4 => ['name' => 'Ковбаса варена', 'price' => 60],
      8.     5 => ['name' => 'Сік апельсиновий', 'price' => 25],
      9.     6 => ['name' => 'Чай зелений', 'price' => 30],
      10.     7 => ['name' => 'Шоколад молочний', 'price' => 22],
      11.     8 => ['name' => 'Макарони спагеті', 'price' => 18],
      12.     9 => ['name' => 'Цукор', 'price' => 20],
      13.     10 => ['name' => 'Яйця курячі (10 шт)', 'price' => 38],
      14. ];
      
     Далі оголошуються дві змінні. Змінна $cart є порожнім масивом, який буде використовуватися як кошик для зберігання вибраних користувачем товарів під час виконання програми. До цього масиву поступово додаватимуться позиції товарів та їх кількість у процесі купівлі. Друга змінна $user є асоціативним масивом, що містить два поля: name — імʼя користувача, яке за замовчуванням має порожній рядок, та age — вік користувача, який спочатку дорівнює нулю. Цей масив буде використовуватися для збереження персональних даних користувача, які він вводитиме у відповідному пункті головного меню програми. 
      
      15. 
      16. $cart = [];
      17. $user = ['name' => '', 'age' => 0];
      
     Після цього оголошено дві функції. Перша функція ClearScreen() виконує просту дію — виводить символ нового рядка, створюючи в консолі візуальний відступ між виведеними блоками інформації. Це допомагає структурувати відображення тексту на екрані та робить інтерфейс програми зручнішим для сприйняття. Друга функція PrintMainMenu() призначена для формування та виведення головного меню застосунку. Вона друкує декоративну рамку, всередині якої розміщується назва програми «ПРОДОВОЛЬЧИЙ МАГАЗИН "ВЕСНА"». Далі йде перелік доступних користувачеві команд: вибір товарів, отримання підсумкового рахунку, налаштування профілю та вихід із програми. Наприкінці функція виводить запрошення до введення команди, щоб користувач міг обрати подальшу дію. 
      
      19. function ClearScreen() 
      20. {
      21.     echo "\n";
      22. }
      23. 
      24. function PrintMainMenu() 
      25. {
      26.     echo "################################\n";
      27.     echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
      28.     echo "################################\n";
      29.     echo "1 Вибрати товари\n";
      30.     echo "2 Отримати підсумковий рахунок\n";
      31.     echo "3 Налаштувати свій профіль\n";
      32.     echo "0 Вийти з програми\n";
      33.     echo "Введіть команду: ";
      34. }
      
     Оголошено функцію PrintProducts(), яка приймає як параметр масив $products і відповідає за виведення переліку товарів на екран у зручному табличному форматі. На початку функції виводиться заголовок таблиці з назвами колонок: номер товару, його назва та ціна. Далі лінія з тире візуально відокремлює заголовок від списку товарів. За допомогою циклу foreach функція проходить по всіх елементах масиву $products, де кожен товар має унікальний числовий ключ $id, а також назву й ціну, які зберігаються у вкладеному асоціативному масиві $item. Для форматованого виведення рядків використовується функція printf(), яка дозволяє вирівнювати значення в колонках: номер розміщується в полі шириною 3 символи, назва — у полі шириною 35 символів, а ціна — у полі шириною 5 символів. Після виведення всіх товарів ще одна лінія з тире закриває таблицю. Наприкінці додається рядок із цифрою 0 і написом «ПОВЕРНУТИСЯ», що слугує командою для виходу з меню вибору товарів. 
      
      35. 
      36. function PrintProducts($products)
      37. {
      38.     echo "№   НАЗВА                                ЦІНА\n";
      39.     echo "--------------------------------------------------\n";
      40.     foreach ($products as $id => $item)
      41.     {
      42.   printf("%-3d %-35s %5d\n", $id, $item['name'], $item['price']);
      43.     }
      44.     echo "--------------------------------------------------\n";
      45.     echo "0   ПОВЕРНУТИСЯ\n";
      46. }
      
     Далі оголошено функцію PrintCart(), яка відповідає за виведення вмісту кошика покупця. Функція приймає один параметр — масив $cart, що містить обрані товари та їх кількість. На початку функції перевіряється, чи кошик порожній за допомогою функції empty(). Якщо кошик не містить жодного товару, на екран виводиться повідомлення «КОШИК ПОРОЖНІЙ», після чого виконання функції переривається командою return. Якщо ж у кошику є товари, програма виводить заголовок «У КОШИКУ:» і далі підписи для колонок — назва товару та кількість. Далі за допомогою циклу foreach програма проходить по кожному елементу масиву $cart, де в кожному елементі зберігаються значення назви товару та кількості. Для акуратного форматованого виведення використовується функція printf(), яка дозволяє вирівняти назву товару в полі шириною 25 символів, а поруч вивести кількість. У результаті користувач бачить актуальний вміст свого кошика в зручному для перегляду вигляді.
      
      47. 
      48. function PrintCart($cart) 
      49. {
      50.     if (empty($cart)) {
      51.         echo "КОШИК ПОРОЖНІЙ\n";
      52.         return;
      53.     }
      54.     echo "У КОШИКУ:\n";
      55.     echo "НАЗВА                     КІЛЬКІСТЬ\n";
      56.     foreach ($cart as $item) {
      57.         printf("%-25s %d\n", $item['name'], $item['quantity']);
      58.     }
      59. }
      
     Функція GetInput() призначена для зчитування введених користувачем даних із клавіатури в консольному застосунку. Всередині функції викликається fgets(STDIN) — ця команда читає один рядок тексту, введений з клавіатури (з стандартного потоку введення). Отримане значення потім обробляється функцією trim(), яка видаляє зайві пробіли, символи переведення рядка та інші непотрібні пробільні символи на початку й в кінці рядка. Відформатований рядок повертається як результат виконання функції. 
     
      60. 
      61. function GetInput() 
      62. {
      63.     return trim(fgets(STDIN));
      64. }
      
     Далі реалізовано основний цикл програми з нескінченною конструкцією while (true), що дозволяє безперервно виводити головне меню й обробляти команди користувача, поки не буде явно перервано виконання. Усередині циклу спочатку викликається функція PrintMainMenu(), яка виводить на екран головне меню програми.
     Потім за допомогою функції GetInput() зчитується введена користувачем команда з клавіатури. Далі за допомогою конструкції if (!in_array(...)) перевіряється, чи введене значення входить до дозволеного списку команд ['0', '1', '2', '3']. Якщо команда неправильна, програма виводить повідомлення "ПОМИЛКА! Введіть правильну команду" та продовжує цикл заново.
     Якщо ж користувач вводить команду 0, то програма виводить прощальне повідомлення "Дякуємо за покупки! До побачення!" та виконує break, що завершує цикл і припиняє роботу застосунку. 
     
      65. 
      66. while (true) 
      67. {
      68.     PrintMainMenu();
      69.     $command = GetInput();
      70.     if (!in_array($command, ['0', '1', '2', '3']))
      71.     {
      72.         echo "ПОМИЛКА! Введіть правильну команду\n\n";
      73.         continue;
      74.     }
      75.     if ($command == '0') 
      76.     {
      77.         echo "Дякуємо за покупки! До побачення!\n";
      78.         break;
      79.     }
      
     Далі обробляється вибір користувачем пункту меню під номером 1, який відповідає за додавання товарів до кошика. Усередині if ($command == '1') запускається вкладений нескінченний цикл while (true), в якому спочатку виводиться перелік доступних товарів за допомогою функції PrintProducts($products).
     Після цього програма запитує в користувача номер товару. Якщо користувач вводить 0, цикл переривається командою break, що дозволяє повернутись до головного меню. Якщо введений номер відсутній у масиві $products, програма повідомляє про помилку та пропонує ввести номер заново.
     Якщо номер коректний, обирається відповідний товар, виводиться його назва і запитується кількість одиниць для купівлі. Далі перевіряється, чи є введене значення числом від 0 до 99. Якщо дані некоректні, програма видає помилку і знову чекає на введення.
     Якщо користувач вводить 0 як кількість, обраний товар видаляється з кошика (unset($cart[$product_id])) з відповідним повідомленням. Інакше товар додається до кошика або оновлюється його кількість у масиві $cart як новий елемент із полями name, price і quantity.
     Після кожного додавання або видалення товару викликається функція PrintCart($cart), яка показує поточний вміст кошика. (дод. В)
     Розглянемо випадок коли обрано пункт головного меню під номером 2, що відповідає за виведення підсумкового рахунку. Після перевірки, якщо кошик $cart порожній (тобто користувач ще не вибрав жодного товару), програма повідомляє про це текстом "КОШИК ПОРОЖНІЙ. Спершу оберіть товари." і повертається до головного меню командою continue. Якщо кошик не порожній, на екран виводиться заголовок таблиці з назвами колонок: порядковий номер, назва товару, ціна за одиницю, кількість та загальна вартість по кожній позиції. Далі оголошуються змінні $total для підрахунку загальної суми та $index для порядкового номеру рядка. За допомогою циклу foreach програма проходить по кожному товару в кошику. Для кожної позиції обчислюється її вартість як добуток ціни на кількість ($cost = $item['price'] * $item['quantity']), після чого виводиться рядок таблиці з деталями за допомогою printf, де вказуються порядковий номер, назва товару, ціна, кількість і вартість.
Після обробки всіх товарів, виводиться підсумкова сума для оплати рядком РАЗОМ ДО СПЛАТИ: $total.

      120.  if ($command == '2') 
      121.     {
      122.         if (empty($cart)) 
      123.         {
      124.             echo "КОШИК ПОРОЖНІЙ. Спершу оберіть товари.\n";
      125.             continue;
      126.         }
      127. 
      128.         echo "№  НАЗВА               ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ\n";
      129.         $total = 0;
      130.         $index = 1;
      131.         foreach ($cart as $item) 
      132.         {
      133.             $cost = $item['price'] * $item['quantity'];
      134.             printf("%-2d %-25s %-5d %-9d %d\n", $index, $item['name'], $item['price'], $item['quantity'], $cost);
      135.             $total += $cost;
      136.             $index++;
      137.         }
      138.         echo "РАЗОМ ДО CПЛАТИ: $total\n";
      139.     }
      
     Далі реалізовано обробку пункту головного меню під номером 3, який дозволяє користувачу налаштувати власний профіль. Після вибору цього пункту програма запитує у користувача ім’я, зчитуючи його за допомогою функції GetInput(). Далі ім’я перевіряється регулярним виразом /[A-Za-zА-Яа-яІіЇїЄєҐґ]/u, який гарантує наявність хоча б однієї літери (латинської чи української). Якщо перевірка не проходить, виводиться повідомлення про помилку "ПОМИЛКА! Імʼя повинно містити хоча б одну літеру" і програма повертається до головного меню.
     Після успішного введення імені програма запитує вік. Значення також вводиться через GetInput() і перевіряється на відповідність числовому значенню в діапазоні від 7 до 150. Якщо введено некоректне число або значення поза межами — виводиться повідомлення про помилку "ПОМИЛКА! Вік має бути від 7 до 150 років" і програма знову повертається до головного меню.
     Якщо обидва поля введено коректно, значення записуються у масив $user за відповідними ключами 'name' і 'age'. Після цього виводиться повідомлення "Профіль успішно оновлено!".
     В кінці блоку викликається функція ClearScreen(), яка додає порожній рядок для візуального очищення екрана, після чого програма знову повертається до циклу головного меню.
     
      141. if ($command == '3') 
      142.     {
      143.         echo "Ваше імʼя: ";
      144.         $name = GetInput();
      145.        if (!preg_match('/[A-Za-zА-Яа-яІіЇїЄєҐґ]/u', $name))
      146.         {
      147.             echo "ПОМИЛКА! Імʼя повинно містити хоча б одну літеру\n";
      148.             continue;
      149.         }
      150.         
      151.         echo "Ваш вік: ";
      152.         $age = GetInput();
      153.         if (!is_numeric($age) || $age < 7 || $age > 150) 
      154.         {
      155.             echo "ПОМИЛКА! Вік має бути від 7 до 150 років\n";
      156.             continue;
      157.         }
      158. 
      159.         $user['name'] = $name;
      160.         $user['age'] = $age;
      161.         echo "Профіль успішно оновлено!\n";
      162.     }
      163. 
      164.     ClearScreen();
      165. }
      166. ?>
     

      

      ВИСНОВКИ
      У ході виконання лабораторної роботи було розроблено консольну програму мовою PHP для моделювання роботи продовольчого магазину. Програма реалізовує головне меню з можливістю вибору товарів, перегляду кошика, формування підсумкового рахунку та налаштування профілю користувача. Під час виконання завдання було закріплено навички роботи з асоціативними масивами, обробки користувацького вводу, організації нескінченного циклу з умовами виходу та перевірками коректності даних. Також було застосовано базові принципи побудови меню та структурованого виведення даних у консоль. Особливу увагу приділено обробці помилкових ситуацій — перевірці правильності вибору пунктів меню, коректності введення кількості товару та віку користувача, а також роботі з кошиком і розрахунку загальної суми покупки.
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

     ДОДАТОК А
     Посилання на YouTube
      
      Відеозапис презентації результатів лабораторної роботи: https://youtu.be/ufeSGCBc1bY
      00:00 Привітання
      00:24 Оголошення масиву товарів
      00:37 Масиви для зберігання кошику та профілю
      00:50 Функція ClearScreen
      01:05 Функція PrintMainMenu
      01:23 Функція PrintProducts
      01:42 Функція  PrintCart
      02:20 Функція  GetInput
      02:43 Цикл для меню
      03:36 Вибір першого пункту меню
      04:58 Вибір другого пункту меню
      05:55 Вибір третього пункту меню
      07:20 Тестування програми

    ДОДАТОК Б
    
    GitHub репозиторій: https://github.com/NureHushchynMykhailo/smp-pzpi-23-5-hushchyn-mykhailo/blob/main/Lab2/smp-pzpi-23-5-hushchyn-mykhailo-lab2/smp-pzpi-23-5-hushchyn-mykhailo-lab2-code.php
      
      
      
      
      

     ДОДАТОК В
     
     
      80. if ($command == '1') 
      81.     {
      82.         while (true) 
      83.         {
      84.             PrintProducts($products);
      85.             echo "Виберіть товар: ";
      86.             $product_id = GetInput();
      87.             if ($product_id == '0') break;
      88.             if (!array_key_exists($product_id, $products)) 
      89.             {
      90.                 echo "ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n";
      91.                 continue;
      92.             }
      93.             $product = $products[$product_id];
      94.             echo "Вибрано: {$product['name']}\n";
      95.             echo "Введіть кількість, штук: ";
      96.             $quantity = GetInput();
      97.             if (!is_numeric($quantity) || $quantity < 0 || $quantity >= 100) 
      98.             {
      99.                 echo "ПОМИЛКА! Введіть коректну кількість (0-99)\n";
      100.                 continue;
      101.             }
      102.             if ($quantity == 0) 
      103.             {
      104.                 unset($cart[$product_id]);
      105.                 echo "ВИДАЛЯЮ З КОШИКА\n";
      106.                 PrintCart($cart);
      107.                 continue;
      108.             }
      109. 
      110.             $cart[$product_id] = [
      111.                 'name' => $product['name'],
      112.                 'price' => $product['price'],
      113.                 'quantity' => $quantity
      114.             ];
      115. 
      116.             PrintCart($cart);
      117.         }
      118.     }
      
      
      

      
2


